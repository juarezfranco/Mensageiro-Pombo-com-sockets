/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ufgd.redes.views;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import ufgd.redes.controllers.Controller;
import ufgd.redes.models.Usuario;
import ufgd.redes.socket.ReceiveMessage;
/**
 *
 * @author franco
 */
public class JanelaMain extends javax.swing.JFrame {
    /**
     * Controller da aplicação.
     */
    private Controller controller;    
    
    /**
     * Guarda em memória quais abas de conversas estão abertas.
     * Chave: username, Integer: indice da aba
     */
    private Map<String ,Integer> conversasAbertas; 
    
    /**
     * Modelo do jList onde ficam os contatos.
     */
    MyListModel modeloList;
    
    /**
     * Construtor janela principal da aplicação.
     * @param controller
     */
    public JanelaMain(Controller  controller) {
        initComponents();
        //seta controller
        this.controller = controller;
        //faz referencia da janelaMain para o controller, o controller precisa conhecer quem é a Main
        this.controller.setContexto(this);
        //inicializa a lista de abas de conversas abertas.
        conversasAbertas = new HashMap();
        //baixa do servidor todos os contatos ativos
        carregarListaContatos();
        //cria thread que recebe mensagens
        ReceiveMessage receive = new ReceiveMessage(controller);
        new Thread(receive).start();
        //exibe janela
        setVisible(true);
        
        /**
         * preciso criar uma thread que escute envios de mensagens do servidor para aplicação
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListContatos = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pombo");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jListContatos.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jListContatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListContatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListContatos);

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        jLabel1.setText("<html>Contatos</html>");

        jTabbedPane.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addGap(3, 3, 3))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(721, 509));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Encerra a aplicação
     * @param evt 
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        try {
            controller.close();
        } catch (IOException ex) {
            Logger.getLogger(JanelaMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //encerra aplicação
        System.exit(1);
    }//GEN-LAST:event_formWindowClosed
    
    /**
     * Listener de clique ao selecionar um contato na lista de contatos,
     * após ser selecionado é criado uma nova aba de conversa na janela principal, 
     * se a aba ja existir então exibe o conteudo desta aba.
     */
    private void jListContatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListContatosMouseClicked
        Usuario contato = (Usuario)jListContatos.getSelectedValue();
        
        //verifica se ja existe alguma aba aberta deste usuario
        if(conversasAbertas.containsKey(contato.getUsername())){
            jTabbedPane.setSelectedIndex(conversasAbertas.get(contato.getUsername()));//recupera indice da aba e seleciona aba da conversa
        }//se não existe aba aberta é preciso criar nova aba
        else{
            //adiciona nova aba no componente TabbedPane
            
            jTabbedPane.addTab(contato.getUsername(), new PanelConversa(this, contato));
            //seleciona para exibir nova aba que foi criada
            jTabbedPane.setSelectedIndex(jTabbedPane.getTabCount()-1);
            //guarda informações da aba na lista de conversasAbertas
            conversasAbertas.put(contato.getUsername(), jTabbedPane.getSelectedIndex());
        }
    }//GEN-LAST:event_jListContatosMouseClicked

    
    /**
     * Método resonsável por adicionar na tela a mensagem recebida.
     * 
     * @param remetente
     * @param msg 
     */
    public void showReceiveMessage(String remetente, String msg){
        PanelConversa panel;
        //verifica se aba da conversa ja está aberta
        if(conversasAbertas.containsKey(remetente)){
            //recupera aba da conversa
            panel = (PanelConversa)jTabbedPane.getComponentAt(conversasAbertas.get(remetente));
            panel.novaMensagem(msg);
        }else{
            //cria uma nova aba, adiciona nova aba no componente TabbedPane
            panel = new PanelConversa(this, new Usuario(remetente));
            panel.novaMensagem(msg);
            jTabbedPane.addTab(remetente, panel);
            int tabCount = jTabbedPane.getTabCount();
            conversasAbertas.put(remetente, tabCount-1);
        }
        
    }
    
    /**
     * Carrega lista de Contatos ativos,
     * é feito download do servidor de todos os contatos ativos.
     */
    private void carregarListaContatos(){
        List<Usuario> listUsuarios = controller.getListaUsuarios();
        modeloList = new MyListModel(listUsuarios);
        jListContatos.setModel(modeloList);
    }
    
    public Controller getController(){
        return controller;
    }
    
    /**
     * Fecha uma aba de conversa
     * @param aba, container da aba
     * @param contato , username do contato da aba
     */
    public void fecharConversa(PanelConversa aba, String contato){
        //remover informações da aba da lista de conversasAbertas
        conversasAbertas.remove(contato);
        //remove aba do componente TabbedPane
        jTabbedPane.remove(aba);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListContatos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Classe modelo personalizado para o jList.
     */
    private class MyListModel extends AbstractListModel{
        List<Usuario> contatos;
        
        public MyListModel(){
            contatos = new ArrayList();
        }
        public MyListModel(List<Usuario> contatos){
            this.contatos = contatos;
        }
        @Override
        public int getSize() {
            return contatos.size();
        }

        @Override
        public Usuario getElementAt(int index) {
            return contatos.get(index);
        }
        
    }
}
